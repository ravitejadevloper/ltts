parameters:
  workingDirectory: "WinnConnect"
  artifactName: "main_service"
  deploymentArtifactName: "deployment"
  # nodeVersion: "16.15.1"
  nodeVersion: "18.18.1"
  pythonVersion: "3.10"
  serviceName: ""
  deviceType: "common"
  smartRvVersion: "undefined"
  modules: []

jobs:
  # - ${{ if or(contains(variables['Build.SourceBranch'], 'refs/heads/'),eq(variables['Build.SourceBranch'], 'refs/heads/develop'),eq(variables['Build.SourceBranch'], 'refs/heads/release'),eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
  #  removed condition because we need to build from tag to have deployment if wasn't deployed
  #  yet on an environment
  #  condition: or(contains(variables['Build.SourceBranch'], 'refs/heads/'), startsWith(variables['Build.SourceBranch'],'refs/pull'))
    - job: ${{ parameters.serviceName }}_build
      pool:
        vmImage: "ubuntu-latest"
      steps:
        - checkout: self
          path: ${{ parameters.workingDirectory }}/SmartRV
        - checkout: frontend
          path: ${{ parameters.workingDirectory }}/Frontend
        - task: UseNode@1
          displayName: Set Node Version (${{ parameters.nodeVersion }})
          inputs:
            version: ${{ parameters.nodeVersion }}
        - task: UsePythonVersion@0
          displayName: Set Python Version (${{ parameters.pythonVersion }})
          inputs:
            versionSpec: ${{ parameters.pythonVersion }}
        - template: ../tasks/run_component_generation_task.yml
          parameters:
            workingDirectory: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/SmartRV
        - template: ../tasks/run_pytest_task.yml
          parameters:
            testFolder: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/SmartRV/iot_service
        - template: ../tasks/run_pytest_task.yml
          parameters:
            testFolder: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/SmartRV/main_service
        - script: |
            pip install poetry
            poetry install
            poetry run python package_build.py ../../build --existing-version
          workingDirectory: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/SmartRV/setup
          displayName: Build Backend
        - script: |
            npm install
            npm run build
            mkdir -p ../../build/smartrv-frontend
            cp -R ./build/* ../../build/smartrv-frontend/
          workingDirectory: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/Frontend/client
          displayName: Build Frontend
        - script: |
            find ./build/ -type d -name .pytest_cache -prune -exec rm -rf {} \;
            find ./build/ -type d -name __pycache__ -prune -exec rm -rf {} \;
            find ./build/ -type f -name _"*.md" -prune -exec rm -rf {} \;
          workingDirectory: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}
          displayName: Clean Build Directory
        - script: |
            pip install poetry
            poetry install
          workingDirectory: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/build/main_service
          displayName: Install Dependencies
        - template: tasks/ado_publish_pipeline_task.yml@templates
          parameters:
            targetPath: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/build/main_service
            artifactName: ${{ parameters.artifactName }}
        - script: |
            echo "Build.SourceBranch: $(Build.SourceBranch)"
            echo "Build.SourceBranchName: $(Build.SourceBranchName)"
            mkdir -p deployment
            mkdir -p deployment/OtaTemplates
            mkdir -p deployment/CategoryTemplates
            mkdir -p deployment/About
            mkdir -p deployment/ComponentGroups
            mkdir -p deployment/ComponentTypes
            cp ./SmartRV/main_service/components/generated/OtaTemplates/${{ parameters.deviceType }}*.json ./deployment/OtaTemplates/
            cp ./SmartRV/data/VANILLA_ota_template.json ./deployment/OtaTemplates/ota_template.json
            cp ./SmartRV/data/about.* ./deployment/About/
            cp ./SmartRV/main_service/components/generated/CategoryTemplates/${{ parameters.deviceType }}*.json ./deployment/CategoryTemplates/
            cp ./SmartRV/main_service/components/generated/ComponentGroups/${{ parameters.deviceType }}*.json ./deployment/ComponentGroups/
            cp ./SmartRV/main_service/components/generated/ComponentTypes/*.json ./deployment/ComponentTypes/
          workingDirectory: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}
          displayName: Create Deployment Directory
        - template: ../tasks/create_meta_file_task.yml
          parameters:
            workingDirectory: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/deployment
            deviceType: ${{ parameters.deviceType }}
            smartRvVersion: ${{ parameters.smartRvVersion}}
            modules: ${{ parameters.modules }}
        - template: ../tasks/package_all_modules_task.yml
          parameters:
            sourceBaseFolder: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/build
            destinationBaseFolder: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/deployment
            deviceType: ${{ parameters.deviceType}}
            smartRvVersion: ${{ parameters.smartRvVersion}}
            modules: ${{ parameters.modules }}
        - template: tasks/ado_publish_pipeline_task.yml@templates
          parameters:
            targetPath: $(Pipeline.Workspace)/${{ parameters.workingDirectory }}/deployment
            artifactName: ${{ parameters.deploymentArtifactName }}
