parameters:
  jobName: copy_files_drop_folder_<env>
  dependsOnEnv: ''
  environmentName: ''
  sourceFolder: ''
  deviceType: 'common'
  cohorts: ''
  smartRvVersion: "undefined"
  azureServiceConnectionName: ''
  azureStorageAccount: ''
  dropContainerName: 'iot-private-content-container'
  deploymentArtifactName: "deployment"
  modules: []
  releaseFunctionUrl: ''
  releaseFunctionApiKeyName: ''
  isRelease: false
  publish: false

jobs:
  - deployment: ${{ parameters.JobName }}
    environment: ${{ parameters.environmentName }}
    displayName: copy files to ${{ parameters.environmentName}}
    pool:
      vmImage: "ubuntu-latest"
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              fetchDepth: 0
            
            - task: AzureCLI@2
              displayName: check for released version of meta
              inputs:
                workingDirectory: ${{ parameters.sourceFolder}}/SmartRV
                azureSubscription: '${{ parameters.azureServiceConnectionName }}'
                scriptType: 'pscore'
                scriptLocation: 'inlineScript'
                inlineScript: |
                  try {
                    git log --oneline --since 1.day
                  }
                  catch {
                    Write-Host "An error occurred:"
                    Write-Host $_ 
                  }
                  Write-host "Build.SourceBranch: $(Build.SourceBranch)"
                  Write-host "Build.SourceBranchName: $(Build.SourceBranchName)"
                  Write-host "##vso[task.setvariable variable=IsError]'false'"
                  Write-host "##vso[task.setvariable variable=IsReleased]'false'"
                  $releasesRemoteFilePath = 'release/${{parameters.deviceType}}/${{parameters.smartRvVersion}}/ota_meta.json'
                  $storageAccount = '${{parameters.azureStorageAccount}}'
                  $containerName = '${{parameters.dropContainerName}}'
                  $existsResponse = az storage blob exists --name $releasesRemoteFilePath --account-name $storageAccount --container-name $containerName --auth-mode login
                  if ($existsResponse -like "*false*") {
                    Write-host "${{parameters.smartRvVersion}} is a valid release due to no meta"
                    Write-host "##vso[task.setvariable variable=IsReleased]'true'"
                  }

                pwsh: true # For Linux
            - task: DownloadPipelineArtifact@2
              displayName: Download pipeline artifact
              inputs:
                artifact: ${{ parameters.deploymentArtifactName }}
            - ${{ each module in parameters.modules }} :
              - template: ../tasks/copy_unreleased_file_blob_storage_task.yml
                parameters:
                  displayName: 'Copy ${{ module.module }} module to ${{ module.container }}'
                  sourceFile: '${{ parameters.sourceFolder }}/${{module.module}}-${{module.version}}.tar.gz.gpg'
                  azureSubscription: ${{ parameters.azureServiceConnectionName }}
                  storageAccount: ${{ parameters.azureStorageAccount }}
                  containerName: ${{ parameters.dropContainerName }}
                  ${{ if eq( module.container, 'deviceType') }}:
                    destinationPath: '${{ parameters.deviceType }}/modules/${{module.module}}/${{ module.version }}/${{ module.module }}-${{ module.version }}.tar.gz.gpg'
                  ${{ else }}:
                    destinationPath: '${{ module.container }}/modules/${{module.module}}/${{ module.version }}/${{ module.module }}-${{ module.version }}.tar.gz.gpg'
                  commitCompare: '${{ module.module}}/*'
                  isReleased: '$(IsReleased)'

            - template: ../tasks/copy_unreleased_file_blob_storage_task.yml
              parameters:
                displayName: 'Copy meta file to ${{ parameters.deviceType }}'
                sourceFile: '${{ parameters.sourceFolder}}/ota_meta.json'
                azureSubscription: ${{ parameters.azureServiceConnectionName }}
                storageAccount: ${{ parameters.azureStorageAccount }}
                containerName: ${{ parameters.dropContainerName }}
                destinationPath: '${{ parameters.deviceType }}/${{ parameters.smartRvVersion}}/ota_meta.json'
                isReleased: '$(IsReleased)'

            # Copy Ota Templates
            - template: ../tasks/copy_files_batch_blob_storage_task.yml
              parameters:
                displayName: 'OtaTemplates to ${{ parameters.environmentName}} - ${{ parameters.deviceType }}'
                sourcePath: '${{ parameters.sourceFolder}}/OtaTemplates/'
                sourcePattern: '*ota_template.json'
                azureSubscription: '${{ parameters.azureServiceConnectionName }}'
                storageAccount: '${{ parameters.azureStorageAccount }}'
                containerName: '${{ parameters.dropContainerName }}'
                destinationPath: '${{ parameters.deviceType }}/${{ parameters.smartRvVersion}}'
                overwrite: true

            # Copy Category Templates
            - template: ../tasks/copy_files_batch_blob_storage_task.yml
              parameters:
                displayName: 'CategoryTemplates to meta ${{ parameters.environmentName}} - ${{ parameters.deviceType }}'
                sourcePath: '${{ parameters.sourceFolder}}/CategoryTemplates/'
                sourcePattern: '${{ parameters.deviceType }}.*.json'
                azureSubscription: '${{ parameters.azureServiceConnectionName }}'
                storageAccount: '${{ parameters.azureStorageAccount }}'
                containerName: '${{ parameters.dropContainerName }}'
                destinationPath: '${{ parameters.deviceType }}/${{ parameters.smartRvVersion}}/meta/'
                overwrite: true

            # Copy Component Groups
            - template: ../tasks/copy_files_batch_blob_storage_task.yml
              parameters:
                displayName: 'ComponentGroups to meta ${{ parameters.environmentName}} - ${{ parameters.deviceType }}'
                sourcePath: '${{ parameters.sourceFolder}}/ComponentGroups/'
                sourcePattern: '${{ parameters.deviceType }}.*.json'
                azureSubscription: '${{ parameters.azureServiceConnectionName }}'
                storageAccount: '${{ parameters.azureStorageAccount }}'
                containerName: '${{ parameters.dropContainerName }}'
                destinationPath: '${{ parameters.deviceType }}/${{ parameters.smartRvVersion}}/meta/'
                overwrite: true

            # Copy Component Types
            - template: ../tasks/copy_files_batch_blob_storage_task.yml
              parameters:
                displayName: 'ComponentTypes to meta ${{ parameters.environmentName}} - ${{ parameters.deviceType }}'
                sourcePath: '${{ parameters.sourceFolder}}/ComponentTypes/'
                sourcePattern: '*.*.json'
                azureSubscription: '${{ parameters.azureServiceConnectionName }}'
                storageAccount: '${{ parameters.azureStorageAccount }}'
                containerName: '${{ parameters.dropContainerName }}'
                destinationPath: '${{ parameters.deviceType }}/${{ parameters.smartRvVersion}}/meta/ComponentTypes'
                overwrite: true
          
            # Copy About files md and html to meta area
            - template: ../tasks/copy_files_batch_blob_storage_task.yml
              parameters:
                displayName: 'about files to meta - ${{ parameters.environmentName}} - ${{ parameters.deviceType }}'
                sourcePath: '${{ parameters.sourceFolder}}/About/'
                sourcePattern: 'about.*'
                azureSubscription: '${{ parameters.azureServiceConnectionName }}'
                storageAccount: '${{ parameters.azureStorageAccount }}'
                containerName: '${{ parameters.dropContainerName }}'
                destinationPath: '${{ parameters.deviceType }}/${{ parameters.smartRvVersion}}/meta/about'
                overwrite: true
            
            - pwsh: throw "Errors were detected based on package files deployed"
              displayName: 'Task Deployment Finalization - Errors Check'
              condition: eq(variables['IsError'],'true')