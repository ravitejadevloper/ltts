# Does the light have zones ?
# Does the light have RGB capabilities
# Does the light have brightness, if yes, what is the value for 0% and 100% and in between
#
from copy import deepcopy
import subprocess
import time


from main_service.modules.hardware.common import HALBaseClass

from  common_libs.models.common import (
    RVEvents,
    EventValues
)

# Monitor the CZONE light that CZONE currently controls
# This will change when we intercept the momentary switch can messges and
# implement the fuctions for the light czone is doing


# # Initialize lighting controllers used in the 800
czone = CZone(
    cfg={
        'mapping': {
            9: 14,
            10: 15
        },
        'controller_id': [0x00, 0x00],
        'zones': {}
    }
)
itc_1 = ITC(
    cfg={
        'controller_id': 1, # ID is one in ITC schema [0x20, 0xdc],
        'zones': {}
    }
)
itc_2 = ITC(
    cfg={
        'controller_id': 2, # ID is two in ITC schema [0x20, 0xdd],
        'zones': {}
    }
)


settings = {
    'title': 'Lighting System Settings',
    'configuration': None,
    'information': [
        {
            'title': 'MANUFACTURER INFORMATION',
            'items': [
                {
                    'title': 'Galley Light',
                    'sections': [
                        {
                            'title': None,
                            'items': [
                                {
                                    'key': 'Manufacturer',
                                    'value': 'ITC'
                                },
                                {
                                    'key': 'Product Model',
                                    'value': '???'
                                }
                            ]
                        }
                    ]
                },
                {
                    'title': 'Accent Light',
                    'sections': [
                        {
                            'title': None,
                            'items': [
                                {
                                    'key': 'Manufacturer',
                                    'value': 'ITC'
                                },
                                {
                                    'key': 'Product Model',
                                    'value': '???'
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    ]
}


ZONE_TO_BIT = {
    1: 1,
    2: 2,
    3: 4,
    4: 8,
    5: 1,
    6: 2,
    7: 4,
    8: 8
}

CZONE_ZONES = (9, 10)
TOGGLED_ZONES = [10]


RGBW_DEFAULT = '#F0000000'
COLORE_TEMP_DEFAULT = 5000
BRIGHTNESS_DEFAULT = 80

MASTER_DEFAULT = {
    'onOff': 0,
    'rgb': '#00000000',
    'clrTmp': 4000,
    'brt': 75
}

# HW Defaults, might be overwritten elsewhere, based on user prefs etc.
zones = [
    {
        'id': 1,
        'type': 'SIMPLE_DIM',
        "name": "Front Bunk",
        "description": "Front Bunk Lights",
        'code': 'lz',

        'controller_type': 'ITC 227X-RGBW',
        'controller': itc_1,
        'state': {
            'rgb': RGBW_DEFAULT,
            'brt': BRIGHTNESS_DEFAULT,
            'onOff': 0,
            'clrTmp': COLORE_TEMP_DEFAULT
        }
    },
    {
        'id': 2,
        'type': 'SIMPLE_DIM',
        "name": "Front Bed",
        "description": "Front Bed Lights",
        'code': 'lz',
        'controller_type': 'ITC 227X-RGBW',
        'controller': itc_1,
        'state': {
            'rgb': RGBW_DEFAULT,
            'brt': BRIGHTNESS_DEFAULT,
            'onOff': 1,
            'clrTmp': COLORE_TEMP_DEFAULT
        }
    },
    {
        'id': 3,
        'type': 'SIMPLE_DIM',
        "name": "Rear Bed",
        'description': '',
        'code': 'lz',

        'controller_type': 'ITC 227X-RGBW',
        'controller': itc_1,
        # 'SimpleDim': {
        #     'brightness': 100,
        #     'onOff': 0,
        # },
        'state': {
            'onOff': 0
        },
        # Light is running as a dimmable light on RED
        'channel': 'R'
    },
    {
        'id': 4,
        'type': 'SIMPLE_DIM',
        "name": "Galley Accent",
        'description': '',
        'code': 'lz',

        'controller_type': 'ITC 227X-RGBW',
        'controller': itc_1,
        'state': {
            'rgb': RGBW_DEFAULT,
            'brt': BRIGHTNESS_DEFAULT,
            'onOff': 0,
            'clrTmp': COLORE_TEMP_DEFAULT
        }
    }
]

zones_by_id = {x.get('id'): x for x in zones}

def default_light_setting():
    default_light_ids = []
    for zone in zones:
        if zone['name'] == 'Front Work' or zone['name'] == 'Main' or zone['name'] == 'Galley':
            default_light_ids.append(zone['id'])
    return default_light_ids

DEFAULT_LIGHTS = default_light_setting()

init_script = {
    # Should a real script go here for init
}

shutdown_script = {}


ZONE_DEFAULTS = {
    'RGBW': {
        'onOff': 0,
        'brt': 75,
        'rgb': RGBW_DEFAULT,
        'clrTmp': 5000
    },
    'SimpleDim': {
        'onOff': 0,
        'brt': 100
    },
    'Simple': {
        'onOff': 0
    }
}


def load_state():
    '''Read state from storage or memory or CAN bus.'''
    state = {}
    for zone in zones:
        zone_id = zone.get('id')
        zone_type = zone.get('type')

        zone_default = zone.get(
            zone_type,
            ZONE_DEFAULTS[zone_type]
        )
        # print('Zone default: ', zone_default)

        state[zone_id] = zone_default

        return state


class Lighting(HALBaseClass):
    def __init__(self, config={}):
        HALBaseClass.__init__(self, config=config)

        self.brightness = config.get('brt')
        self.color_temp = config.get('clrTmp')
        self.rgb = config.get('rgb')
        self.onOff = config.get('onOff')
        # self.state = load_state()
        # self.savedState = load_state()
        self.HAL = None
        self.configBaseKey = 'lighting'


    def zone_onoff(self, zone_id, onOff):
        pass

    def zone_brightness(self, zone_id, brt):
        pass

    def zone_rgb(self, zone_id, rgb):
        pass

    def zone_colortemp(self, zone_id, clrTmp):
        pass

    def _init_config(self):
        # Get zones
        # TODO:
        config_found = False
        for i in range(10):
            index = i + 1
            key = f'{self.configBaseKey}.zone.{index}'
            config_value = self.HAL.app.get_config(key)
            #print('>>>', key, config_value)

            if config_value is not None:
                config_found = True
                # Do something with the light
                print(config_value)
                self._light_switch(index, config_value)
            else:
                # set a generic default off
                self._light_switch(
                    index,
                    {
                        'onOff': 0,
                        'brt': BRIGHTNESS_DEFAULT,
                        'rgb': RGBW_DEFAULT,
                        'clrTmp': 5000
                    }
                )
        # Get presets handled on App level

    def _update_state(self, zone, new_state):
        if zone in self.state:
            zone_state = self.state[zone]
        else:
            zone_state = {}

        # print('Zone State', zone_state)

        updated_keys = []

        # Check for changes in the zone state keys
        for key, value in new_state.items():
            if key in zone_state:
                if value != zone_state.get(key):
                    updated_keys.append(key)
                    zone_state[key] = value
            else:
                zone_state[key] = value
                updated_keys.append(key)

        # print('Final zone state', zone_state)

        self.state[zone] = zone_state

        # print(self.state[zone], updated_keys)

        return updated_keys

    def setHAL(self, hal_obj):
        self.HAL = hal_obj

    def light_status(self):
        lights_on = 0
        lights_off = 0
        lights_unknown = 0

        for zone_id, zone_state in self.state.items():
            if zone_id in ('preset_1', 'preset_2', 'preset_3', 'smarttoggle', 'zone_0'):
                # print('Skipping', zone_id)
                continue

            if zone_state.get('onOff') == 1:
                lights_on += 1
            elif zone_state.get('onOff') == 0:
                lights_off += 1
            else:
                lights_unknown += 1

        return {
            'on': lights_on,
            EventValues.OFF: lights_off,
            'na': lights_unknown
        }

    def perform_reset(self):
        '''Execute a lighting reset.

        Might be needed if lighting controllers misbehave or SW issues block recovery.'''
        cmd = (
            # Enable saving to EEPROM
            'cansend can0 0CFC0044#FFFF6E01;'
            # Set lighting controllers to single light mode
            'cansend can0 0CFC0044#FFFF02FF00;'
            # Set lighting to white
            'cansend can0 0CFC0044#FFFF01FFFFFFFF00;'
            # set brightness to 75%
            'cansend can0 0CFC0044#FFFF03FF4040;'
            # Set color temp range 3000 - 9000 K
            'cansend can0 0CFC0044#FFFF3DFF0BB82328;'
            # Save to EEPROM
            'cansend can0 0CFC0044#FFFF6E00;'
        )
        result = subprocess.run(
            cmd,
            shell=True,
            capture_output=True
        )
        return result


    def get_hw_info(self):
        return {}


    def get_state(self, zone=None, key=None):
        '''Return state of lighting system.'''
        # if zone in CZONE_ZONES:
        #     return czone.state.get(zone)

        # else:
        if zone is not None:
            if key is None:
                # Return the whole zone
                # print('GetState', self.state)
                return self.state.get(zone)
            else:
                key_result = self.state.get(zone, {}).get(key)
                return key_result

        return self.state


    def get_master_light_state(self, zone_id=0):
        '''Get the current values/states for the master light switch.'''
        key = f'zone_{zone_id}'
        master_state = self.state.get(key, MASTER_DEFAULT)

        light_status = self.light_status()
        lights_on = light_status.get('on')
        return 1 if lights_on > 0 else 0


    def set_master_light_state(self, new_state, zone_id=0):
        '''Set the new state for master light switch.'''
        key = f'zone_{zone_id}'
        self.state[key] = new_state


    def notification(self, level):
        '''Visualize notifications to the user based on criticality.'''
        # Get current settings/state and store
        # Flash color of desired zones in this coach/product
        # Set back
        controller_id = self._get_controller_id_from_zone(0)
        zone = '{:02X}'.format(
            ZONE_TO_BIT.get(0, 0xff)
        )

        if level == 'error':
            color = 'ff0000'
        elif level == 'warning':
            color = 'ffff00'
        else:
            color = '00ff00'

        for i in range(6):
            self.zone_rgb(0, color)
            time.sleep(0.5)
            self.zone_rgb(0, 'ffffff')
            time.sleep(0.3)


    def smartToggle(self, onOff):
        # print('SmartToggle to HW request', onOff)

        # TODO: Test if that is needed, currently leading to timing issue
        # if self.state.get('smarttoggle') == onOff.onOff:
        #     #ignore
        #     print('State is already as requested, ignoring')
        #     return onOff

        if onOff.onOff == 0:
            current_state = deepcopy(self.state)
            for k, v in current_state.items():
                self.savedState[k] = v

            # print('Saved state as', self.savedState)

            for zone in zones:
                self.zone_switch(zone.get('id'), on_off=0)

            self.state['smarttoggle'] = 0

        elif onOff.onOff == 1:
            # print('Saved State:', self.savedState.items())
            for k, v in self.savedState.items():
                # print('key:', k, 'value:', v)
                if k in ('preset_1', 'preset_2', 'preset_3', 'smarttoggle', 'zone_0'):
                    continue

                self.zone_switch(k, v.get('onOff', 0))
            self.state['smarttoggle'] = 1
        else:
            self.state['smarttoggle'] = None
            raise ValueError(f'Cannot handle onOff value of {onOff.onOff}')

        event_value = EventValues.ON if onOff.onOff == 1 else EventValues.OFF
        self.event_logger.add_event(
            RVEvents.LIGHTING_GROUP_LIGHT_SWITCH_OPERATING_MODE_CHANGE,
            0,
            event_value
        )

        return self.state.get('smarttoggle')

    def update_can_state(self, msg_name, can_msg):
        '''
        Received CAN message lighting_broadcast
        {
            'Data1': 'Zone4',
            'Data2': 'Single Color',
            'Data3': '255',
            'Data4': '255',
            'Data5': '255',
            'Data6': '0',
            'Data7': '80',
            'Data8': '100',
            'msg': 'Timestamp: 1671520635.783745    ID: 0cfe20dc    X Rx                DL:  8    04 00 ff ff ff 00 50 64     Channel: can0',
            'msg_name': 'Lighting_Broadcast',
            'instance_key':
            'CFE20DC__Zone4__NA'
        }
        Dec 20 07:17:17 WinnConnect .sh[1371]: Received CAN message lighting_broadcast {'Data1': 'Zone2', 'Data2': 'Single Color', 'Data3': '255', 'Data4': '255', 'Data5': '255', 'Data6': '0', 'Data7': '80', 'Data8': '100', 'msg': 'Timestamp: 1671520635.788805    ID: 0cfe20dc    X Rx                DL:  8    02 00 ff ff ff 00 50 64     Channel: can0', 'msg_name': 'Lighting_Broadcast', 'instance_key': 'CFE20DC__Zone2__NA'}
        Dec 20 07:17:17 WinnConnect .sh[1371]: Received CAN message lighting_broadcast {'Data1': 'Zone1', 'Data2': 'Single Color', 'Data3': '255', 'Data4': '255', 'Data5': '255', 'Data6': '0', 'Data7': '80', 'Data8': '100', 'msg': 'Timestamp: 1671520635.794988    ID: 0cfe20dc    X Rx                DL:  8    01 00 ff ff ff 00 50 64     Channel: can0', 'msg_name': 'Lighting_Broadcast', 'instance_key': 'CFE20DC__Zone1__NA'}
        Dec 20 07:17:17 WinnConnect .sh[1371]: Received CAN message lighting_broadcast {'Data1': 'Zone3', 'Data2': 'Single Color', 'Data3': '36', 'Data4': '36', 'Data5': '36', 'Data6': '219', 'Data7': '100', 'Data8': '100', 'msg': 'Timestamp: 1671520635.798727    ID: 0cfe20dc    X Rx                DL:  8    03 00 24 24 24 db 64 64     Channel: can0', 'msg_name': 'Lighting_Broadcast', 'instance_key': 'CFE20DC__Zone3__NA'}
        Dec 20 07:17:17 WinnConnect .sh[1371]: Received CAN message lighting_broadcast {'Data1': 'Zone4', 'Data2': 'Single Color', 'Data3': '255', 'Data4': '255', 'Data5': '255', 'Data6': '0', 'Data7': '64', 'Data8': '100', 'msg': 'Timestamp: 1671520635.803945    ID: 0cfe20dc    X Rx                DL:  8    04 00 ff ff ff 00 40 64     Channel: can0', 'msg_name': 'Lighting_Broadcast', 'instance_key': 'CFE20DC__Zone4__NA'}
        Dec 20 07:17:17 WinnConnect .sh[1371]: Received CAN message lighting_broadcast {'Data1': 'Zone3', 'Data2': 'Single Color', 'Data3': '255', 'Data4': '255', 'Data5': '255', 'Data6': '0', 'Data7': '64', 'Data8': '100', 'msg': 'Timestamp: 1671520635.808818    ID: 0cfe20dc    X Rx                DL:  8    03 00 ff ff ff 00 40 64     Channel: can0', 'msg_name': 'Lighting_Broadcast', 'instance_key': 'CFE20DC__Zone3__NA'}
        Dec 20 07:17:17 WinnConnect .sh[1371]: Received CAN message lighting_broadcast {'Data1': 'Zone2', 'Data2': 'Single Color', 'Data3': '255', 'Data4': '255', 'Data5': '255', 'Data6': '0', 'Data7': '64', 'Data8': '100', 'msg': 'Timestamp: 1671520635.813632    ID: 0cfe20dc    X Rx                DL:  8    02 00 ff ff ff 00 40 64     Channel: can0', 'msg_name': 'Lighting_Broadcast', 'instance_key': 'CFE20DC__Zone2__NA'}
        Dec 20 07:17:17 WinnConnect .sh[1371]: Received CAN message lighting_broadcast {'Data1': 'Zone1', 'Data2': 'Single Color', 'Data3': '255', 'Data4': '255', 'Data5': '255', 'Data6': '0', 'Data7': '64', 'Data8': '100', 'msg': 'Timestamp: 1671520635.818642    ID: 0cfe20dc    X Rx                DL:  8    01 00 ff ff ff 00 40 64     Channel: can0', 'msg_name': 'Lighting_Broadcast', 'instance_key': 'CFE20DC__Zone1__NA'}
        '''
        # TODO: Implement handling of ITC zone status
        # TODO: Fix and bring back if needed

        # print('>>>>>Received CAN message', msg_name, can_msg)
        # # Get which controller DC, DD, DE, DF
        # instance_key = can_msg.get('instance_key')
        # if instance_key is None:
        #     return False, {}

        # pgn = instance_key.split('__')[0]
        # if pgn.endswith('DC'):
        #     controller_id = 1
        # elif pgn.endswith('DD'):
        #     controller_id = 2
        # else:
        #     return False, {}

        # print('>>>>> Lighting Controller', controller_id)
        # # 'Data1': 'Zone4',
        # controller_zone_id = int(can_msg.get('Data1').replace('Zone', ''))
        # # Zones are 1-4 on Controller 1 and 5-8 on Controller 2
        # zone_id = controller_zone_id * controller_id
        # zone_mode =  can_msg.get('Data2')
        # zone_brightness = int(can_msg.get('Data7'))
        # r = int(can_msg.get('Data3'))
        # g = int(can_msg.get('Data4'))
        # b = int(can_msg.get('Data5'))
        # w = int(can_msg.get('Data6'))
        # zone_rgb = f'{r:02X}{g:02X}{b:02X}'
        # print('>>>>> Lighting Zone', zone_id, 'Mode', zone_mode, 'Brightness', zone_brightness, 'rgb', zone_rgb)
        # # Update
        # # Brightness (applies only to RGB, white change in ITC app does not modify this value)

        # if zone_brightness == 0 and zone_rgb == '000000':
        #     self._update_state(zone_id, {'onOff': 0})
        # else:
        #     self._update_state(zone_id, {'onOff': 1})
        #     self._update_state(zone_id, {'brightness': zone_brightness})
        #     self._update_state(zone_id, {'rgb': zone_rgb})

        return False, {}

# Moved handler = Lighting() why was it here is base ?

if __name__ == '__main__':

    handler = Lighting()

    print(handler)
    for i in range(1, 11):
        print(handler._get_controller_id_from_zone(i))
